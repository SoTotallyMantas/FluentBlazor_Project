@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
<FluentLayout>
    <FluentHeader>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween" VerticalAlignment="VerticalAlignment.Center" Width="100%">
            <span>Computer parts shop</span>

            @if (RendererInfo.IsInteractive && _isUserAuthenticated)
            {
                <FluentButton id="cart-button" class="@(_isUserAuthenticated ? "" : "hidden")" IconStart="@(new Icons.Regular.Size24.Cart().WithColor(Color.Warning))" OnClick="@TopRightButtonClicked">
                    Cart
                </FluentButton>
                <FluentPopover Style="width: 300px;" VerticalThreshold="170" AnchorId="cart-button" @bind-Open="_visible">
                    <Header>Callout Header</Header>
                    <Body>
                        <FluentStack Orientation="Orientation.Vertical">
                            <FluentCheckbox>Item 1</FluentCheckbox>
                            <FluentCheckbox>Item 2</FluentCheckbox>
                            <FluentTextField tabindex="0"></FluentTextField>
                        </FluentStack>
                    </Body>
                    <Footer>Callout Footer</Footer>
                </FluentPopover>
            }
        </FluentStack>
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent Class="body-content">
            <div class="content">
                @Body
            </div>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
        <a href="https://www.fluentui-blazor.net" target="_blank">Documentation and demos</a>
        <FluentSpacer />
        <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor" target="_blank">About Blazor</a>
    </FluentFooter>
</FluentLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; }
    bool _visible;
    public void TopRightButtonClicked() {
        ToggleVisible();


    }

    private void ToggleVisible()
    {
        _visible = !_visible;
    }

    private bool _isUserAuthenticated;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        var user = authState.User;

        _isUserAuthenticated = user.Identity?.IsAuthenticated ?? true;
        Console.WriteLine(_isUserAuthenticated);
        Console.WriteLine(RendererInfo.IsInteractive);
    }


    

    
}