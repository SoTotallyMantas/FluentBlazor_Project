@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject ICartService CartService
@inject IStringLocalizer<Resource> Localizer

<FluentLayout>
    <FluentHeader>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween" VerticalAlignment="VerticalAlignment.Center" Width="100%">
            <span>Electromark</span>
            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Right" VerticalAlignment="VerticalAlignment.Center">
                <FluentSelect TOption=string Width="150px" @bind-Value="CultureString">
                    <FluentOption value="en-US">@Localizer["english"]</FluentOption>
                    <FluentOption value="lt">@Localizer["lithuanian"]</FluentOption>
                </FluentSelect>
            </FluentStack>
            <AuthorizeView Roles="user">
            @if (RendererInfo.IsInteractive)
            {
                <FluentButton id="cart-button" IconStart="@(new Icons.Regular.Size24.Cart().WithColor(Color.Warning))" OnClick="@TopRightButtonClicked">
                    @Localizer["cart"]
                </FluentButton>
                <FluentPopover Style="width: 450px; color: black;" VerticalThreshold="170" AnchorId="cart-button" @bind-Open="_visible">
                    <Header>@Localizer["cart"]</Header>
                    <Body>
                        @if (cartItems != null && cartItems.Any())
                        {
                            <FluentStack Orientation="Orientation.Vertical" Style="max-height: 300px; overflow-y: auto;">
                                @foreach (var item in cartItems)
                                {
                                    <FluentStack Orientation="Orientation.Horizontal"
                                    Style="padding: 10px; border-bottom: 1px solid #eee; justify-content: space-between; align-items: center;">
                                        <span>@(item.Product?.Name + ", " + Localizer["quantity"] + item.Quantity)</span>
                                        <div style="display: flex; align-items: center; gap: 10px;">
                                            <span>€@(item.Product?.Price * item.Quantity)</span>
                                            <FluentButton Appearance="Appearance.Lightweight"
                                            IconStart="@(new Icons.Regular.Size16.Delete())"
                                            OnClick="@(() => RemoveItem(item.ProductId))" />
                                        </div>
                                    </FluentStack>
                                }
                            </FluentStack>
                            <FluentStack Orientation="Orientation.Horizontal"
                            Style="padding: 10px; justify-content: space-between;">
                                <strong>@Localizer["total"]</strong>
                                <strong>€@CalculateTotal()</strong>
                            </FluentStack>
                        }
                        else
                        {
                            <p style="padding: 10px;">@Localizer["noCart"]</p>
                        }
                    </Body>
                    <Footer>
                       @if(cartItems.Count() > 0)
                        {
                            <FluentButton Appearance="Appearance.Lightweight"
                            IconStart="@(new Icons.Regular.Size16.ArrowDown())"
                            OnClick="@openPayment">
                                @Localizer["payment"]
                            </FluentButton>
                        }
                    </Footer>
                </FluentPopover>
            }
            </AuthorizeView>
        </FluentStack>
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent Class="body-content">
            <div class="content">
                @Body
            </div>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
        <a href="https://www.fluentui-blazor.net" target="_blank">Documentation and demos</a>
        <FluentSpacer />
        <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor" target="_blank">About Blazor</a>
    </FluentFooter>
    <FluentDialogProvider />
</FluentLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; }
    bool _visible;
    private List<CartItem> cartItems = new();

    public void TopRightButtonClicked() 
    {
        ToggleVisible();
    }

    private void ToggleVisible()
    {
        _visible = !_visible;
        LoadCartItems();
    }

    private void openPayment()
    {
        if(cartItems.Any())
        {
            Navigation.NavigateTo("/payment");
        }
    }

    private bool _isUserAuthenticated;
    protected override async Task OnInitializedAsync()
    {
        CultureString = CultureInfo.CurrentCulture.Name;
        var authState = await AuthStateTask;
        var user = authState.User;

        _isUserAuthenticated = user.Identity?.IsAuthenticated ?? true;
        Console.WriteLine(_isUserAuthenticated);
        Console.WriteLine(RendererInfo.IsInteractive);
    }

    private string CultureString
    {
        get => CultureInfo.CurrentCulture.Name;
        set
        {
            if (CultureInfo.CurrentCulture.Name != value)
            {
                var newCulture = new CultureInfo(value);
                var uri = new Uri(Navigation.Uri)
                    .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
                var cultureEscaped = Uri.EscapeDataString(newCulture.Name);
                var uriEscaped = Uri.EscapeDataString(uri);

                var fullUri = $"Culture/Set?culture={cultureEscaped}&redirectUri={uriEscaped}";
                Navigation.NavigateTo(fullUri, forceLoad: true);
            }
        }
    }

    private async Task LoadCartItems()
    {
        var authState = await AuthStateTask;
        var user = authState.User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        if(userStringId != null)
        {
            var cart = await CartService.GetOrCreateUserCartAsync(userStringId);
            cartItems = cart.CartItems.ToList();
            StateHasChanged();
        }
    }

    private decimal CalculateTotal()
    {
        return cartItems?.Sum(item => item.Product?.Price * item.Quantity ?? 0) ?? 0;
    }

    private async Task RemoveItem(Guid productId)
    {
        var authState = await AuthStateTask;
        var user = authState.User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        if (userStringId != null)
        {
            await CartService.RemoveFromCartAsync(userStringId, productId);
            await LoadCartItems();
        }
    }
}