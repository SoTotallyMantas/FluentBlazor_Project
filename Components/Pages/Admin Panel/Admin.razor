@page "/admin"
@inject NavigationManager Navigation
@inject IProductService _productService
@inject ICategoryService _categoryService
@inject IUserService _userService
@using FluentBlazor_Project.Data
@using FluentBlazor_Project.Data.DTO
@using FluentBlazor_Project.Data.Models
@using FluentBlazor_Project.Interface
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@using Microsoft.AspNetCore.Authorization
@using Microsoft.FluentUI.AspNetCore.Components.DataGrid
@attribute [Authorize(Roles = "administrator")]
@rendermode InteractiveServer

<h2>Admin</h2>
<FluentTabs style="margin-top: 5px;">
    <FluentTab id="productTab" label="Product">
        <FluentDataGrid @ref="@productGrid" Items="@products.AsQueryable()" Pagination="@productPagination" MultiLine="true" Loading="false" >

            <PropertyColumn Property="@(p => p.Name)" Title="Product Name" Sortable="true" />
            <PropertyColumn Property="@(p => p.Category)" Title="Category Name" Sortable="true" />

            <TemplateColumn Title="Actions">
                <FluentButton Style="width: 60px; height: 40px;"
                Appearance="Appearance.Accent"
                IconEnd="@(new Icons.Regular.Size20.Pen())"
                Title="Edit"
                @onclick="@(() => EditProduct(context.Id))" 
                />

                <FluentButton Style="width: 60px; height: 40px;"
                Appearance="Appearance.Accent"
                IconEnd="@(new Icons.Regular.Size20.BinRecycle())"
                Title="Delete"
                @onclick="@(() => DeleteProduct(context.Id))"
                />
            </TemplateColumn>
        </FluentDataGrid>
        <FluentButton Style="width: 60px; height: 40px;"
                      Appearance="Appearance.Accent"
                      IconEnd="@(new Icons.Regular.Size20.Pen())"
                      Title="Create New"
                      @onclick="CreateNewProduct">

            Create New

         </FluentButton>
        <FluentPaginator State="@productPagination" />
    </FluentTab>
    <FluentTab id="categoryTab" label="Category">
        <FluentDataGrid @ref="@categoriesGrid" Items="@categories.AsQueryable()" Pagination="@categoryPagination" MultiLine="true">
            <PropertyColumn Property="@(c => c.CategoryName)" Title="Name" Sortable="true" />
            <PropertyColumn Property="@(c => c.Title)" Title="Title" Sortable="true" />
            <PropertyColumn Property="@(c => c.Description)" Title="Description" Sortable="true" />
            <TemplateColumn Title="Actions">
                <FluentButton Style="width: 60px; height: 40px;"
                Appearance="Appearance.Accent"
                IconEnd="@(new Icons.Regular.Size20.Pen())"
                Title="Edit" 
                @onclick="@(() => EditCategory(context.Id))" />

                <FluentButton Style="width: 60px; height: 40px;"
                Appearance="Appearance.Accent"
                IconEnd="@(new Icons.Regular.Size20.BinRecycle())"
                Title="Delete" 
                @onclick="@(() => DeleteCategory(context.Id))" />


            </TemplateColumn>
        </FluentDataGrid>
        <FluentButton Style="width: 60px; height: 40px;"
                      Appearance="Appearance.Accent"
                      IconEnd="@(new Icons.Regular.Size20.Pen())"
                      @onclick="CreateNewCategory">

            Create New

         </FluentButton>
        <FluentPaginator State="@categoryPagination" />
    </FluentTab>

    <FluentTab id="userTab" label="Users">
        <FluentDataGrid @ref="@userGrid" Items="@userDisplays.AsQueryable()" Pagination="@userPagination" MultiLine="true">
            <PropertyColumn Property="@(u => u.Name)" Title="Name" Sortable="true" />
            <PropertyColumn Property="@(u => u.Email)" Title="Email" Sortable="true" />
            <TemplateColumn Title="Actions">
                <FluentButton Style="width: 60px; height: 40px;"
                Appearance="Appearance.Accent"
                IconEnd="@(new Icons.Regular.Size20.Pen())"
                Title="Edit" 
                @onclick="@(() => EditUser(context.Id))"/>

                <FluentButton Style="width: 60px; height: 40px;"
                Appearance="Appearance.Accent"
                IconEnd="@(new Icons.Regular.Size20.BinRecycle())"    
                Title="Delete"
                @onclick="@(() => DeleteUser(context.Id))" />
            </TemplateColumn>
        </FluentDataGrid>
        @{
            // Hidden due to unfinished nature
            // no way to add password to created user
        }
       @if(false){
        <FluentButton Style="width: 60px; height: 40px;"
                      Appearance="Appearance.Accent"
                      IconEnd="@(new Icons.Regular.Size20.Pen())"
                      @onclick="CreateNewUser">

            Create New

         </FluentButton>
        }
        <FluentPaginator State="@userPagination" />
    </FluentTab>
</FluentTabs>

@code {
    PaginationState productPagination = new PaginationState() { ItemsPerPage = 12 };
    PaginationState categoryPagination = new PaginationState() { ItemsPerPage = 12 };
    PaginationState userPagination = new PaginationState() { ItemsPerPage = 12 };
    bool? dialogRejected;
    FluentDataGrid<Product> productGrid;
    FluentDataGrid<UserDisplay> userGrid;
    FluentDataGrid<Category> categoriesGrid;
    private List<Product> products = new();
    private List<Category> categories = new();
    private List<UserDisplay> userDisplays = new();
    protected override async Task OnInitializedAsync()
    {
        products = await _productService.GetProductsAsync();
        categories = await _categoryService.GetCategoriesAsync();
        userDisplays = await _userService.GetUsers();
    }

    private RenderFragment template = @<span />;

    private async void DeleteUser(string userId)
    {
        await ShowConfirmationAsync();
        if(dialogRejected == false)
        {
            await _userService.DeleteUser(userId);
            userDisplays = await _userService.GetUsers();
            // RefreshDataASync does not auto Rerender?
            await userGrid.RefreshDataAsync();
            this.StateHasChanged();
        }
       
        dialogRejected = false;
    }
    private async void DeleteCategory(Guid categoryId)
    {
        await ShowConfirmationAsync();
        if (dialogRejected == false)
        {


            Category category = await _categoryService.GetByIdAsync(categoryId);
            await _categoryService.DeleteCategoryAsync(category);
            categories = await _categoryService.GetCategoriesAsync();
            // RefreshDataASync does not auto Rerender?
            await categoriesGrid.RefreshDataAsync();
            this.StateHasChanged();
        }
       
        dialogRejected = false;
    }
    private async void DeleteProduct(Guid productId)
    {
        await ShowConfirmationAsync();
        if (dialogRejected == false)
        {

            await _productService.ToggleSoftDeletionProductAsync(productId);
            products = await _productService.GetProductsAsync();
            // RefreshDataASync does not auto Rerender?
            await productGrid.RefreshDataAsync();
            this.StateHasChanged();
        }

        dialogRejected = false;
    }
    private void EditProduct(Guid productId)
    {
        Navigation.NavigateTo($"/editProduct/{productId}");
    }

    private void EditCategory(Guid categoryId)
    {
        Navigation.NavigateTo($"/editCategory/{categoryId}");
    }
    private void EditUser(string userId)
    {
        Navigation.NavigateTo($"/editUser/{userId}");
    }
    private void CreateNewProduct()
    {
        Navigation.NavigateTo($"/createProduct/");
    }
    private void CreateNewCategory()
    {
        Navigation.NavigateTo($"/createCategory/");
    }
    private void CreateNewUser()
    {
        Navigation.NavigateTo($"/createUser/");
    }
    
    private async Task ShowConfirmationAsync()
    {
        var dialog = await DialogService.ShowConfirmationAsync("Are you <strong>sure</strong> you want to delete this item? <br /><br />This will also remove any linked items");
        var result = await dialog.Result;
        dialogRejected = result.Cancelled;
    }
    private async Task ShowMessageBoxAsync()
    {
        var dialog = await DialogService.ShowMessageBoxAsync(new DialogParameters<MessageBoxContent>()
            {
                Content = new()
                {
                    Title = "My title",
                    MarkupMessage = new MarkupString("My <strong>customized</strong> message"),
                    Icon = new Icons.Regular.Size24.Games(),
                    IconColor = Color.Success,
                },
                PrimaryAction = "Plus",
                SecondaryAction = "Minus",
                Width = "300px",
            });
        var result = await dialog.Result;
        dialogRejected = result.Cancelled;
    }
}

