@page "/editCategory/{Id}"
@inject NavigationManager Navigation
@using FluentBlazor_Project.Data.Models
@using FluentBlazor_Project.HelperFunctions
@using FluentBlazor_Project.Interface
@inject ICategoryService _categoryService

@if (category == null)
{
    <p>Loading category...</p>
}
else
{
    <h2>Product @category.CategoryName Editing</h2>
    <FluentTextArea Name="name" Rows="1" Cols="60" @bind-Value="category.CategoryName" Label="Change name:" Required/>
    <FluentTextArea Name="title" Rows="1" Cols="60" @bind-Value="category.Title" Label="Change title:" />
    <FluentTextArea Name="description" Rows="1" Cols="60" @bind-Value="category.Description" Label="Change description:" />

    <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Submit" Style="width: 75px">Save</FluentButton>
    <FluentButton Appearance="Appearance.Accent" Style="width: 75px" onClick="@handelCancel">Cancel</FluentButton>


    <FluentInputFile @ref="@myFileUploader"
                     DragDropZoneVisible="false"
                     Mode="InputFileMode.SaveToTemporaryFolder"
                     Multiple="true"
                     AnchorId="MyUploadLoadingButton"
                     MaximumFileSize="@(100 * 1024 * 1024)"
                     Accept=".jpg, .png, .svg, .webp"
                     OnProgressChange="@(e =>
                     {
                         _formUploading = true;
                         progressPercent = e.ProgressPercent;
                         progressTitle = e.ProgressTitle;
                     })"
                     OnCompleted="@OnCompleted" />

    <FluentProgress Min="0" Max="100" Visible="@(progressPercent > 0)" Value="@progressPercent" />
    <FluentLabel Alignment="HorizontalAlignment.Center">
        @progressTitle
    </FluentLabel>

    <FluentButton Id="MyUploadLoadingButton" Loading="_formUploading" Appearance="Appearance.Accent">
        Upload files
    </FluentButton>

    @if (category.Images.ImagePath != null)
    {
        <h4>File(s) uploaded:</h4>
        <ul>

            <li>

                @category.Images.ImagePath
                @if (category.Images.ImagePath != null)
                {



                    <img src="@category.Images.ImagePath" style="height: 125px;width:125px" />


                    <p>"Upload Again to Replace Image"</p>


                }
            </li>

        </ul>
    }
}

@code 
{
    [Parameter] public string Id { get; set; }
    private FileHelper imageUpload = new FileHelper();
    private Category? category;

    protected override async Task OnInitializedAsync()
    {
        Guid.TryParse(Id, out var parsedId);
        category = await _categoryService.GetByIdAsync(parsedId);

        if (category == null)
        {
            Navigation.NavigateTo("/404");
        }
    }
    // Fluent Input Logic
    bool _formUploading;
    FluentInputFile? myFileUploader = default!;
    int? progressPercent;
    string? progressTitle;

    FluentInputFileEventArgs[] Files = Array.Empty<FluentInputFileEventArgs>();
    List<string> imageSrc = new List<string>();
    List<byte[]> imageSaveData = new List<byte[]>();

    async Task OnCompleted(IEnumerable<FluentInputFileEventArgs> files)
    {

        var newFiles = files.ToArray();
        progressPercent = myFileUploader!.ProgressPercent;
        progressTitle = myFileUploader!.ProgressTitle;

        imageSaveData.Clear();
        imageSrc.Clear();
        foreach (var file in newFiles)
        {

            //Console.WriteLine(file.LocalFile?.ToString());

            // Read Temp Files to byte[] so that we can display and later save if we want to
            byte[] imageData = await File.ReadAllBytesAsync(file.LocalFile?.ToString());
            imageSaveData.Add(imageData);
            // Convert to base64String so that we can actually display it
            string base64String = Convert.ToBase64String(imageData);
            imageSrc.Add($"data:{file.ContentType};base64,{base64String}");
            List<string> savedProductImagesPaths = await imageUpload.SaveFluentInputToFile(newFiles, imageSaveData);
            category.Images.ImagePath = savedProductImagesPaths.First(u => u != null).ToString();
            category.Images.CategoryId = category.Id;
            category.Images.Category = category;
           


        }
        _formUploading = false;


    }
    private async void handleSave()
    {
        if (category != null)
        {
            if (category.Images.Id == Guid.Empty)
            {
                category.Images.Id = Guid.NewGuid();
            }
            await _categoryService.CreateCategoryAsync(category);
            Navigation.NavigateTo("/admin");
        }
    }
    public void Dispose()
    {

        if (category.Images.Id == Guid.Empty)
        {
            FileHelper.TryDeleteImage(category.Images.ImagePath.ToString());
        }
    }

    private void handelCancel()
    {
        if (category.Images.Id == Guid.Empty)
        {
            FileHelper.TryDeleteImage(category.Images.ImagePath.ToString());
        }
        Navigation.NavigateTo("/admin");

    }
}