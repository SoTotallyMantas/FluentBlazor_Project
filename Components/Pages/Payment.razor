@page "/payment"
@inject NavigationManager Navigation
@inject ICartService CartService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPurchaseService PurchaseService
@inject IStringLocalizer<Resource> Localizer

<h3>@Localizer["payment"]</h3>

<FluentGrid Spacing="4" AdaptiveRendering="true" Style="padding: 20px; margin: 0 auto;">

    <FluentGridItem xs="12" sm="6">
        <FluentStack Orientation="Orientation.Vertical" Style="gap: 15px;">
            <FluentCard Style="padding: 20px;">
                <h4>@Localizer["cart"]</h4>
                @foreach (var item in cartItems)
                {
                    <FluentCard Style="padding: 15px;">
                        <FluentStack Orientation="Orientation.Horizontal"
                        Style="align-items: center; justify-content: space-between; gap: 15px;">
                            <div style="background: #f5f5f5; height: 70px; flex-shrink: 0; display: flex; align-items: center; justify-content: center; color: #666;">
                                [Image Placeholder]
                            </div>
                            <span style="flex-grow: 1;">@item.Product?.Name, @Localizer["quantity"] @item.Quantity</span>
                            <span style="min-width: 80px;">€@(item.Product?.Price * item.Quantity)</span>
                            <FluentButton Appearance="Appearance.Lightweight"
                            IconStart="@(new Icons.Regular.Size16.Delete())"
                            OnClick="@(() => RemoveItem(item.ProductId))" />
                        </FluentStack>
                    </FluentCard>
                }
            </FluentCard>
        </FluentStack>
    </FluentGridItem>

    <FluentGridItem xs="12" sm="6">
        <FluentCard Style="padding: 20px;" Height="225px">
            <h4>@Localizer["orderSummary"]</h4>
            <FluentStack Orientation="Orientation.Vertical" Style="gap: 10px;">
                <FluentStack Orientation="Orientation.Horizontal" Style="justify-content: space-between;">
                    <span>@Localizer["withoutPVM"]</span>
                    <strong>€@(CalculateTotal() - CalculatePVM())</strong>
                </FluentStack>
                <FluentStack Orientation="Orientation.Horizontal" Style="justify-content: space-between;">
                    <span>PVM:</span>
                    <strong>€@CalculatePVM()</strong>
                </FluentStack>
                <FluentStack Orientation="Orientation.Horizontal" Style="justify-content: space-between;">
                    <span>@Localizer["total"]</span>
                    <strong>€@CalculateTotal()</strong>
                </FluentStack>
                
                <FluentButton Appearance="Appearance.Accent" OnClick="ProcessPurchase" Style="align-self: flex-end; width:75%; margin-top:10px;">
                    @Localizer["payNow"]
                </FluentButton>
            </FluentStack>
        </FluentCard>
    </FluentGridItem>

    <FluentGridItem xs="12" sm="6">
        <FluentCard Style="padding: 20px;">
            <h4>@Localizer["shippingAddress"]</h4>
            <FluentStack Orientation="Orientation.Vertical" Style="gap: 15px;">
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentTextField Placeholder="@Localizer["firstName"]" Style="width: 50%;" DisplayName="" />
                    <FluentTextField Placeholder="@Localizer["lastName"]" Style="width: 50%;" />
                </FluentStack>
                <FluentTextField Placeholder="@Localizer["streetAddress"]" Style="width: 100%;" />
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentTextField Placeholder="@Localizer["city"]" Style="width: 75%;" />
                    <FluentTextField Placeholder="@Localizer["zipCode"]" Style="width: 25%;" />
                </FluentStack>
                <FluentTextField Placeholder="@Localizer["country"]" Style="width: 100%;" />
            </FluentStack>
        </FluentCard>
    </FluentGridItem>

    <FluentGridItem xs="12" sm="6">
        <FluentCard Style="padding: 20px;">
            <h4>@Localizer["paymentDetails"]</h4>
            <FluentStack Orientation="Orientation.Vertical" Style="gap: 15px;">
                <FluentTextField Placeholder="@Localizer["cardNumber"]" Style="width: 100%;" Maxlength="16" Minlength="16" />
                <FluentStack Orientation="Orientation.Horizontal" Style="gap: 15px;">
                    <FluentTextField Placeholder="MM/YY" Style="width: 100px;" />
                    <FluentTextField Placeholder="CVV" Style="width: 100px;" Maxlength="3" Minlength="3" />
                </FluentStack>
            </FluentStack>
        </FluentCard>
    </FluentGridItem>
</FluentGrid>

@code {
    private List<CartItem> cartItems = new();

    private void inputValidation()
    {

    }
    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task LoadCart()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        if (userStringId != null)
        {
            var cart = await CartService.GetOrCreateUserCartAsync(userStringId);
            cartItems = cart.CartItems.ToList();
        }
        if (!cartItems.Any())
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task RemoveItem(Guid productId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        if (userStringId != null)
        {
            await CartService.RemoveFromCartAsync(userStringId, productId);
            await LoadCart();
        }
    }

    private decimal CalculateTotal()
    {
        return cartItems?.Sum(item => item.Product?.Price * item.Quantity ?? 0) ?? 0;
    }

    private decimal CalculatePVM()
    {
        var price = CalculateTotal();
        return Math.Round(price * 0.21m, 2);
    }

    private async Task ProcessPurchase()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        var productQuantityPair = cartItems.ToDictionary(item => item.ProductId, item => item.Quantity);
        
        await PurchaseService.CreateNewPurchase(userStringId, productQuantityPair);
        await CartService.ClearCartAsync(userStringId);
        
        Navigation.NavigateTo("/");
    }
}
