@page "/Product/{Category}/{Id}"
@using FluentBlazor_Project.Data.Models
@using FluentBlazor_Project.Data.Models.ImageTables
@using FluentBlazor_Project.Interface
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IProductService _productService
@inject IFavoriteService FavoriteService
@inject ICartService _cartService
@inject IStringLocalizer<Resource> Localizer

<div style="margin: 0 auto; padding: 20px;">
    <nav style="margin-bottom: 20px;">
        <a href="/" style="text-decoration: none; color: #666;">@Localizer["home"]</a> >
        <a href="/Product/@Category" style="text-decoration: none; color: #666;">@Category</a> >
        <span style="color: #000;">@product?.Name</span>
    </nav>

    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px; align-items: start;">
        <div style="border: 1px solid #ddd; border-radius: 8px; overflow: hidden; background: #f5f5f5; display: flex; justify-content: center; align-items: center; height: 400px;">
            @if(string.IsNullOrEmpty(imagePath))
            {
                <p style="color: #666;">[Image Placeholder for @product?.Name]</p>
            }
            else
            {
                <img src="@imagePath" style="color: #666;"/>
            }
        </div>

        <div>
            <h1 style="font-size: 2rem; margin-bottom: 15px; font-weight: 600;">@product?.Name</h1>
            <p><strong>@Localizer["category"]</strong> @product?.Category</p>
            <p><strong>@Localizer["type"]</strong> @product?.Type</p>
            <p style="font-size: 1.5rem; font-weight: bold; margin-bottom: 15px;">€@product?.Price</p>
            <div style="display: flex; gap: 15px; margin-bottom: 20px;">
                <AuthorizeView Roles="user">
                    <FluentNumberField @bind-Value="Quantity" Label=@Localizer["quantity"] Style="width: 20%"/>
                    <FluentButton Appearance="Appearance.Accent" 
                    IconStart="@(new Icons.Regular.Size24.Cart())" 
                    Style="width: 65%;"
                    OnClick="addToCard"
                    >
                        @Localizer["addToCart"]
                    </FluentButton>
                    <FluentButton 
                    Appearance="Appearance.Accent"
                    BackgroundColor="@(IsFavorite ? "#CCCCCC" : "#FF3333")"
                    IconEnd="@(IsFavorite ? new Icons.Regular.Size24.HeartBroken() : new Icons.Regular.Size24.Heart())"
                    Style="width: 10%"
                    OnClick=(ToggleFavorite) />
                </AuthorizeView>
            </div>
            <FluentDivider />

            <FluentTabs style="margin-top: 20px;">
                <FluentTab id="descriptionTab" label=@Localizer["tabDescription"]>
                    @if (product != null)
                    {
                        var parts = product.Description.Split(new string[] { "<hr>" }, StringSplitOptions.None);
                        <p>@(new MarkupString(parts[0]))</p>
                    }
                </FluentTab>
                <FluentTab id="specificationTab" label=@Localizer["tabSpecifications"]>
                    @if (product != null)
                    {
                        var parts = product.Description.Split(new string[] { "<hr>" }, StringSplitOptions.None);
                        if (parts.Length > 1)
                        {
                            <p>@(new MarkupString(parts[1]))</p>
                        }
                    }
                </FluentTab>
            </FluentTabs>

            <a href="javascript:window.history.back()" style="text-decoration: none; margin-top: 20px;">
                <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size24.ArrowCircleLeft())">Back</FluentButton>
            </a>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Category { get; set; } = string.Empty;
    [Parameter] public string Id { get; set; } = string.Empty;
    int Quantity { get; set; } = 1;
    private Product product;

    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; }

    private bool IsFavorite { get; set; } = false;
    private Guid FavoriteId { get; set; }
    public string imagePath { get; set; }
    private bool _isUserAuthenticated;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        var user = authState.User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        _isUserAuthenticated = user.Identity?.IsAuthenticated ?? true;

        if (Guid.TryParse(Id, out var ParsedId))
        {
            product = await _productService.RetrieveProductByIndexAsync(ParsedId);
            if(product.Images.Where(p => p.SelectedTag == ProductImages.Tag.Thumbnail).Count() > 0)
            {
                imagePath = product.Images.FirstOrDefault(i => i.SelectedTag == ProductImages.Tag.Thumbnail).ImagePath;
            }
            else{
                imagePath = null;
            }
        }

        if (product == null)
        {
            Navigation.NavigateTo("/404");
            return;
        }

        var favorites = await FavoriteService.GetUserFavoritesAsync(userStringId);
        var favoriteEntry = favorites.FirstOrDefault(f => f.ProductId == product.Id);

        if (favoriteEntry != null)
        {
            IsFavorite = true;
            FavoriteId = favoriteEntry.Id;
        }
    }

    private async Task ToggleFavorite()
    {
        var authState = await AuthStateTask;
        var user = authState.User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        if (IsFavorite)
        {
            await FavoriteService.RemoveFromFavorite(FavoriteId, userStringId);
            IsFavorite = false;
            FavoriteId = Guid.Empty;
        }
        else
        {
            var newFavorite = new Favorites { Id = Guid.NewGuid(), UserId = userStringId, ProductId = product.Id };
            await FavoriteService.AddToFavorites(newFavorite);
            IsFavorite = true;
            FavoriteId = newFavorite.Id;
        }
    }

    private async Task addToCard()
    {
        var authState = await AuthStateTask;
        var user = authState.User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        if (userStringId != null)
        {
            await _cartService.AddCartItem(userStringId, product.Id, Quantity);
            await LoadCartItems();
        }
    }

    private List<CartItem> cartItems = new();
    private async Task LoadCartItems()
    {
        var authState = await AuthStateTask;
        var user = authState.User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        if (userStringId != null)
        {
            var cart = await _cartService.GetOrCreateUserCartAsync(userStringId);
            cartItems = cart.CartItems.ToList();
            StateHasChanged();
        }
    }
}