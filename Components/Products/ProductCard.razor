@using FluentBlazor_Project.Data.Models
@using FluentBlazor_Project.Interface
@inject NavigationManager Navigation
@inject ICartService _cartService
@inject IFavoriteService FavoriteService
@inject IStringLocalizer<Resource> Localizer

<FluentCard style="width: 275px; padding: 16px; margin: 10px; display: flex; flex-direction: column; gap: 5px;">
    <p style="background: #f5f5f5; height: 180px; display: flex; align-items: center; justify-content: center; color: #666;">[Image Placeholder @Name]</p>
    <p>@Name</p>
    <p>@Localizer["price"] €@Price</p>
    <FluentStack>
        <a href="/Product/@Category/@Id" style="width:75%;">
            <FluentButton Appearance="Appearance.Accent" Style="width:100%">@Localizer["moreDetail"]</FluentButton>
        </a>
        <AuthorizeView Roles="user">
            <FluentButton Appearance="Appearance.Accent" BackgroundColor="#7ED273" IconEnd="@(new Icons.Regular.Size24.Cart())" Style="width:10%" onclick="@addToCard" />
            <FluentButton Appearance="Appearance.Accent"
                BackgroundColor="@(IsFavorite ? "#CCCCCC" : "#FF3333")"
                IconEnd="@(IsFavorite ? new Icons.Regular.Size24.HeartBroken() : new Icons.Regular.Size24.Heart())"
                Style="width: 10%"
                OnClick=(ToggleFavorite) />
        </AuthorizeView>
    </FluentStack>
</FluentCard>

@code {
    [Parameter] 
    public Guid Id { get; set; }

    [Parameter]
    public string Category { get; set; } = string.Empty;

    [Parameter] 
    public string Name { get; set; } = string.Empty;

    [Parameter] 
    public decimal Price { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; }

    private bool IsFavorite { get; set; } = false;
    private Guid FavoriteId { get; set; }

    private async Task addToCard()
    {
        var authState = await AuthStateTask;
        var user = authState.User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        if (userStringId != null)
        {
            await _cartService.AddCartItem(userStringId, Id, 1);
            await LoadCartItems();
        }
    }

    private bool _isUserAuthenticated;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        var user = authState.User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        _isUserAuthenticated = user.Identity?.IsAuthenticated ?? true;

        var favorites = await FavoriteService.GetUserFavoritesAsync(userStringId);
        var favoriteEntry = favorites.FirstOrDefault(f => f.ProductId == Id);

        if (favoriteEntry != null)
        {
            IsFavorite = true;
            FavoriteId = favoriteEntry.Id;
        }
    }

    private List<CartItem> cartItems = new();
    private async Task LoadCartItems()
    {
        var authState = await AuthStateTask;
        var user = authState.User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        if (userStringId != null)
        {
            var cart = await _cartService.GetOrCreateUserCartAsync(userStringId);
            cartItems = cart.CartItems.ToList();
            StateHasChanged();
        }
    }

    private async Task ToggleFavorite()
    {
        var authState = await AuthStateTask;
        var user = authState.User;
        var userStringId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
        if (IsFavorite)
        {
            await FavoriteService.RemoveFromFavorite(FavoriteId, userStringId);
            IsFavorite = false;
            FavoriteId = Guid.Empty;
        }
        else
        {
            var newFavorite = new Favorites { Id = Guid.NewGuid(), UserId = userStringId, ProductId = Id };
            await FavoriteService.AddToFavorites(newFavorite);
            IsFavorite = true;
            FavoriteId = newFavorite.Id;
        }
    }
}